package com.code.ds.hashtable.hashmap;

import java.util.HashMap;
import java.util.Map;

/**
 * You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
 

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
 * @author sukh
 *
 */
public class FindTheDifference_2_389 {

  /**
   * Time: O(n)<br>
   * Space: O(1)<br>
   * The problem states string s and string t have lowercase letters. Thus, the
   * total number of unique characters and eventually buckets in the hash map
   * possible are just 26.
   * @param s
   * @param t
   * @return
   */
  public char findTheDiff(String s, String t) {
    char extraChar = '\0';

    // Prepare a counter for string s.
    // This hash map holds the characters as keys and respective frequency as value.
    Map<Character, Integer> counterS = new HashMap<>();
    for (int i = 0; i < s.length(); i++) {
      char ch = s.charAt(i);
      counterS.put(ch, counterS.getOrDefault(ch, 0) + 1);
    }

    // Iterate through string t and find the character which is not in s.
    for (int i = 0; i < t.length(); i += 1) {
      char ch = t.charAt(i);
      int countOfChar = counterS.getOrDefault(ch, 0);
      if (countOfChar == 0) {
        extraChar = ch;
        break;
      } else {

        // Once a match is found we reduce frequency left.
        // This eliminates the possibility of a false match later.
        counterS.put(ch, countOfChar - 1);
      }
    }
    return extraChar;
  }

}
